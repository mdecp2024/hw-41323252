var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323252 \n 個人網站: https://mdecp2024.github.io/hw-41323252/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w15', 'text': '12/18 \n print(sum(range(1, 101)))\n \n \n 一. 當你寫  sum(range(1, 101))  時，這其實是兩個東西在一起發揮作用。 \n \n \n range(1, 101) ： 這個部分就像是告訴電腦：「嘿，我想要一個數字的清單，從 1 開始，一直到 100」。所以  range(1, 101)  會產生一個數字序列：1, 2, 3, … 一直到 100。 \n \n \n sum() ： 接下來， sum()  是讓電腦將這些數字加起來。也就是說， sum(range(1, 101))  就是讓電腦將從 1 到 100 的數字都加起來，然後算出總和。 \n \n 總和 = 2 100 × ( 1 + 100 ) = 2 100 × 101 = 5050 \n \n 二.\xa0 \n def addto(start, end):  return sum(range(start, end + 1)) \n \n # 呼叫函式 result = addto(1, 100) print(result) \n \n \n addto(start, end)  是一個函式，接受兩個參數  start  和  end ，這是累加範圍的開始和結束數字。 \n 函式內部使用  range(start, end + 1)  來生成從  start  到  end  的整數序列，並使用  sum()  函數來計算這些數字的總和。 \n end + 1  是因為  range()  的結束值是排除的，因此我們需要將  end  增加 1。 \n', 'tags': '', 'url': 'w15.html'}, {'title': 'w14_ex', 'text': '12/11 \n 三個圓相交重疊會重新產生顏色 \n from browser import html\nfrom browser import document as doc\nimport random\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    """\n    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。\n    返回畫布元素和它的 2D 繪圖上下文。\n    """\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]  # 獲取指定 id 的 div 元素\n    brython_div <= canvas  # 將 canvas 插入到該 div 中\n     \n    ctx = canvas.getContext("2d")\n    return canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    """\n    生成一個隨機的 RGB 顏色字符串。\n    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。\n    """\n    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)\n    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)\n    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)\n    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串\n\n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    """\n    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。\n    (cx, cy) 為圓心坐標，r 為圓的半徑。\n    """\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的圓心座標和半徑，並進行掃描線填充\ndef draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\n    """\n    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。\n    x1, y1, r1 是圓1的圓心坐標和半徑\n    x2, y2, r2 是圓2的圓心坐標和半徑\n    x3, y3, r3 是圓3的圓心坐標和半徑\n    """\n    canvas, ctx = initialize_canvas(400, 400)\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    \n    color_dict = {}\n\n    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標\n        current_color = None \n        \n        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標\n            # 判斷該點是否在圓1內\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            # 判斷該點是否在圓2內\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            # 判斷該點是否在圓3內\n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n\n            if in_circle1 and in_circle2 and in_circle3:\n                # 如果點同時在三個圓內，則是三圓交集區域\n                if "intersection" not in color_dict:\n                    color_dict["intersection"] = random_color_generator()\n                current_color = color_dict["intersection"]\n            elif in_circle1 and in_circle2:\n                # 如果點在圓1和圓2的交集區域\n                if "circle1_circle2" not in color_dict:\n                    color_dict["circle1_circle2"] = random_color_generator()\n                current_color = color_dict["circle1_circle2"]\n            elif in_circle1 and in_circle3:\n                # 如果點在圓1和圓3的交集區域\n                if "circle1_circle3" not in color_dict:\n                    color_dict["circle1_circle3"] = random_color_generator()\n                current_color = color_dict["circle1_circle3"]\n            elif in_circle2 and in_circle3:\n                # 如果點在圓2和圓3的交集區域\n                if "circle2_circle3" not in color_dict:\n                    color_dict["circle2_circle3"] = random_color_generator()\n                current_color = color_dict["circle2_circle3"]\n            elif in_circle1:\n                # 如果點只在圓1內\n                if "circle1" not in color_dict:\n                    color_dict["circle1"] = random_color_generator()\n                current_color = color_dict["circle1"]\n            elif in_circle2:\n                # 如果點只在圓2內\n                if "circle2" not in color_dict:\n                    color_dict["circle2"] = random_color_generator()\n                current_color = color_dict["circle2"]\n            elif in_circle3:\n                # 如果點只在圓3內\n                if "circle3" not in color_dict:\n                    color_dict["circle3"] = random_color_generator()\n                current_color = color_dict["circle3"]\n            else:\n                # 如果點不在任何圓內，則是背景區域\n                current_color = "white"  # 背景色設為白色\n\n            ctx.fillStyle = current_color\n            ctx.fillRect(px, py, 1, 1)  # 填充一個像素\n\n# 設定三個圓的圓心座標和半徑\nx1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100\n\n# 呼叫畫圓函式，並繪製三個圓\ndraw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3) \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w13_hw', 'text': '12/4 \n 一個紅色格子 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 200\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth=1\nheight=1\n\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke();\n      \n 兩個紅色格子重疊 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400,height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 200\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\nwidth=1\nheight=1\n\nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs,j*gs,gs,gs)\n     ctx.stroke();\n     \nfor i in range(width): \n    for j in range(height):\n     #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n     ctx.lineWidth=1\n     ctx.strokeStyle=\'red\'\n     ctx.beginPath();\n     ctx.rect(i*gs+50,j*gs+50,gs,gs)\n     ctx.stroke(); \n 兩個紅色格子重疊加圓圈 \n from browser import html, document as doc, window\n \n# Create canvas element\ncanvas = html.CANVAS(width=500, height=500)  # Increase canvas size to ensure circles are fully visible\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n# Get the drawing context of the canvas\nctx = canvas.getContext("2d")\n \n# Draw the first empty square at (0, 0)\nwidth = 10\nheight = 10\ngs = 20  # Grid size (for spacing)\n \nctx.lineWidth = 2\nctx.strokeStyle = \'red\'  # Color for the first square\nctx.beginPath()\nctx.rect(50, 50, width * gs, height * gs)  # Draw a hollow square with offset (50, 50)\nctx.stroke()\n \n# Draw the second empty square at (100, 100)\noffset_x = 150  # Change the x-coordinate to give more space\noffset_y = 150  # Change the y-coordinate to give more space\nwidth2 = 10\nheight2 = 10\n \nctx.lineWidth = 2\nctx.strokeStyle = \'red\'  # Color for the second square\nctx.beginPath()\nctx.rect(offset_x, offset_y, width2 * gs, height2 * gs)  # Draw another hollow square\nctx.stroke()\n \n# Function to draw a circle around a square\ndef draw_outer_circle(x, y, width, height):\n    # Calculate the radius of the outer circle (half of the diagonal of the square)\n    radius = window.Math.sqrt(width ** 2 + height ** 2) / 2\n    # Calculate the center of the square\n    center_x = x + width * gs / 2\n    center_y = y + height * gs / 2\n    # Draw the outer circle\n    ctx.beginPath()\n    ctx.arc(center_x, center_y, radius * gs, 0, 2 * window.Math.PI)\n    ctx.strokeStyle = \'black\'  # Color for the outer circle\n    ctx.lineWidth = 2\n    ctx.stroke()\n \n# Draw outer circles around both squares\ndraw_outer_circle(50, 50, width, height)  # For the first square\ndraw_outer_circle(offset_x, offset_y, width2, height2)  # For the second square\n \n# Create the context menu\ncontext_menu = html.DIV(style={"position": "absolute", "display": "none", "background-color": "#fff", "border": "1px solid #ccc", "padding": "5px"})\ncontext_menu <= html.BUTTON("Option 1: Clear Canvas")\ncontext_menu <= html.BUTTON("Option 2: Draw Circle")\nbrython_div <= context_menu\n \n# Function to show context menu\ndef show_context_menu(event):\n    event.preventDefault()  # Prevent the default right-click menu\n    context_menu.style.display = "block"  # Show custom context menu\n    context_menu.style.left = f"{event.pageX}px"  # Set the position of the menu\n    context_menu.style.top = f"{event.pageY}px"\n \n# Hide the context menu when clicking elsewhere\ndef hide_context_menu(event):\n    context_menu.style.display = "none"\n \n# Attach right-click (contextmenu) event to the canvas\ncanvas.bind("contextmenu", show_context_menu)\n \n# Attach click event to document to hide the menu when clicking elsewhere\ndocument.bind("click", hide_context_menu)\n \n# Function for the menu options\ndef clear_canvas(event):\n    ctx.clearRect(0, 0, canvas.width, canvas.height)  # Clear the canvas\n    context_menu.style.display = "none"  # Hide the context menu after action\n \ndef draw_circle(event):\n    ctx.beginPath()\n    ctx.arc(200, 200, 50, 0, 2 * window.Math.PI)  # Draw a circle at the center\n    ctx.strokeStyle = \'green\'\n    ctx.stroke()\n    context_menu.style.display = "none"  # Hide the context menu after action\n \n# Attach actions to context menu buttons\ncontext_menu.children[0].bind("click", clear_canvas)  # First button: Clear canvas\ncontext_menu.children[1].bind("click", draw_circle)  # Second button: Draw a circle \n \n 兩個紅色格子重疊加圓圈加連 線 \n from browser import html, document as doc, window\nimport math\n \ncanvas = html.CANVAS(width=500, height=500) \nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\n \nctx.lineWidth = 2\nctx.strokeStyle = \'red\' \nctx.beginPath()\nctx.rect(50,50,150,150) \nctx.stroke()\n\nctx.beginPath()\nctx.rect(100,100,150,150) \nctx.stroke()\n\nctx.beginPath()\nctx.strokeStyle = \'black\'\nctx.arc(125,125,106, 0, 2 * window.Math.PI)\nctx.stroke()\n \nctx.beginPath()\nctx.strokeStyle = \'black\'\nctx.arc(175,175,106, 0, 2 * window.Math.PI)\nctx.stroke()\n\nctx.beginPath()\nctx.strokeStyle = \'blue\'\nctx.moveTo(50,50)\nctx.lineTo(250,250)\nctx.stroke() \n \n 兩個紅色格子重疊加圓圈加連線加顏色 \n \n from browser import html\nfrom browser import document as doc\nimport math\n \ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \nctx = canvas.getContext("2d")\nctx.lineWidth = 4\n\n#混色的\nctx.globalCompositeOperation = "screem"\n\n\n#黑邊圓*2(每個畫四個邊邊)\nctx.strokeStyle = \'black\'\n#第一個圓\nctx.beginPath()\nctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)\nctx.fillStyle = "Turquoise"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)\nctx.fillStyle = "Tomato"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)\nctx.fillStyle = "SpringGreen"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)\nctx.fillStyle = "FloralWhite"\nctx.fill()\nctx.stroke()\n\n#第二個圓\nctx.beginPath()\nctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)\nctx.fillStyle = "Purple"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)\nctx.fillStyle = "OliveDrab"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)\nctx.fillStyle = "Orange"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)\nctx.fillStyle = "MediumVioletRed"\nctx.fill()\nctx.stroke()\n\n\n#紅方形*2(4個三角形)\nctx.strokeStyle = \'red\'\nctx.beginPath()\nctx.moveTo(60,60)\nctx.lineTo(60,260)\nctx.lineTo(260,260)\nctx.fillStyle = "Gold"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(60,60)\nctx.lineTo(260,60)\nctx.lineTo(260,260)\nctx.fillStyle = "Indigo"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(360,160)\nctx.lineTo(360,360)\nctx.fillStyle = "Cyan"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(160,360)\nctx.lineTo(360,360)\nctx.fillStyle = "SpringGreen"\nctx.fill()\nctx.stroke()\n\n \n#重疊的小方型\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(160,260)\nctx.lineTo(260,260)\nctx.fillStyle = "Turquoise"\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160,160)\nctx.lineTo(260,160)\nctx.lineTo(260,260)\nctx.fillStyle = "SlateBlue"\nctx.fill()\nctx.stroke()\n\n\n#籃斜線\nctx.strokeStyle = \'blue\'\nctx.beginPath() \nctx.moveTo(60, 60)\nctx.lineTo(360, 360)\nctx.stroke() \n \n 這次使用 Brython 在網頁上繪製了重疊的矩形、圓形和對角線，並加入了不同顏色的變化，讓我受益良多。', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w11_hw', 'text': '1. \n import math\n\ndef draw_circle():\n    # 圆心坐标和半径\n    center_x = 5\n    center_y = 5\n    radius = 4\n    \n    # 10x10 网格，遍历每个坐标\n    for y in range(10):\n        row = ""\n        for x in range(10):\n            # 计算当前点到圆心的距离\n            distance = math.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)\n            \n            # 如果距离在圆的范围内，则打印 \'*\'\n            if distance <= radius:\n                row += "*"\n            else:\n                row += " "\n        \n        # 输出每一行\n        print(row)\n\n# 调用函数绘制圆形\ndraw_circle()\n \n \n 2. \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n    \ndef grid(width, height, grid_pix):\n    # x 方向共 width 格\n    # y 方向共 height 格\n    # grid_pix, 每一個的 pixel 點數\n    # 利用迴圈與座標增量繪圖\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect(x * gs, y * gs, gs, gs)\n\n# 繪製 10x10 的網格\ngrid(10, 10, 20)\n\n# 繪製圓形\ndef draw_circle(radius=4, size=10, center_x=5, center_y=5):\n    for y in range(size):\n        for x in range(size):\n            # 判斷是否在圓內\n            if (x - center_x) ** 2 + (y - center_y) ** 2 <= radius ** 2:\n                fill(x, y, "black")\n\n# 呼叫函式繪製圓形\ndraw_circle()\n \n \n 11/27 \n n = 11 #總共的行數\nspace = \'_\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n    for x in range(n):\n        print("(", x, ", ", y, ")",sep="")\n         \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w10', 'text': '11/13 \n \n 題目一 : \n \n \n \n 題目二 : \n 1.變數名稱應該使用小寫字母，並且用底線  _  來分隔單詞，這被稱為「蛇形命名法」（snake_case）。 \n 2.函數名稱也應使用小寫字母，並用底線分隔單詞。 \n 3.類別名稱應使用駝峰式命名法（CamelCase），首字母大寫，後續單字首字母也大寫。 \n 4.常數名稱應該全部大寫，並用底線分隔單詞。 \n 5.避免使用與 Python 內建函數或變數名稱相同的名稱，這樣能防止名稱衝突。例如，避免使用  list ,  str ,  input  等。 \n 6.模組名稱應該盡量簡短且小寫，並使用底線分隔單詞；包名應盡量簡單且小寫。 \n 7.在選擇變數或函數名稱時，應該確保它們能清楚地描述其用途或功能。避免過於模糊或無意義的名稱，如  foo ,  bar ,  temp  等。 \n 8.下是一些錯誤的命名範例，這些命名違反了 Python 的命名規則。 \n \n \n \n 題目三 : \n', 'tags': '', 'url': 'w10.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w8-1', 'text': '10/16 \n \n', 'tags': '', 'url': 'w8-1.html'}, {'title': 'W7', 'text': '10/23 \n \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'HW 3', 'text': "主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.\\ \n def print_number_pyramid(height):  for i in range(height):  # 印出前面的空白  print(' ' * (height - i - 1), end='')  # 印出數字  for j in range(1, i + 2):  print(j, end='')  for j in range(i, 0, -1):  print(j, end='')  print() # 換行 \n 設定金字塔的高度 pyramid_height = 5 print_number_pyramid(pyramid_height)  \xa0 1  121  12321  1234321 123454321 \n", 'tags': '', 'url': 'HW 3.html'}, {'title': 'w8-2', 'text': '', 'tags': '', 'url': 'w8-2.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};